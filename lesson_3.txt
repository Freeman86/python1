# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.

def my_round(number, ndigits):
    number = number * (10 ** ndigits) + 0.5
    number = number // 1
    return number / (10 ** ndigits)


print(my_round(2.1234567, 5))
print(my_round(2.1999967, 5))
print(my_round(2.9999967, 5))


# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить

def lucky_ticket(ticket_number):
    s = str(ticket_number)
    return len(s) == 6 and sum(map(int, s[:3])) == sum(map(int, s[3:]))


print(lucky_ticket(123006))
print(lucky_ticket(12321))
print(lucky_ticket(436751))

NORMAL

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

def fibonacci(n, m):
    buf = []
    a = 0
    b = 1
    while True:
        if b <= m:
            buf.append(b)
        else:
            break
        a, b = b, a+b

    res = []
    for i in buf:
        if i > n:
            res.append(i)
    return res


print(fibonacci(50, 4000))

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()


def sort_to_max(origin_list):
    buf = origin_list.copy()
    for passnum in range(len(buf) - 1, 0, -1):
        for i in range(passnum):
            if buf[i] > buf[i + 1]:
                buf[i], buf[i + 1] = buf[i + 1], buf[i]
    return buf

sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

def filter_func(func, array):
    for i in array[::]:
        if func(i) == False:
            array.remove(i)
    return array



array = [1,2,3,4,5,6,7]

print(filter_func(lambda  x: x < 6, array))
   





